###############################################################################
# @file Kbuild
#
# @brief Linux Ctc driver Kbuild
#
# Automatically generated by driver-gen
# Instructs Kbuild system on what should be compiled.
#
# @author Copyright (C) 2003-2010 CERN. Yury GEORGIEVSKIY <ygeorgie@cern.ch>
#
# @date Created on 22/01/2010
#
# @section license_sec License
#          Released under the GPL
###############################################################################

include $(M)/makefiles/drvr-paramount.mk

USE_UTILS := y
USE_XML   := y

# Relative pathes
CDCM_D := $(call abs2rel, $(ROOTDIR)/cdcm/$(CPU)/$(KVER)/, $(M)/)
VMEB_D := $(call abs2rel, $(ROOTDIR)/vmebridge/driver/$(CPU)/$(KVER)/, $(M)/)
UTIL_D := $(call abs2rel, $(ROOTDIR)/utils/driver/$(CPU)/$(KVER)/, $(M)/)

# Driver utilities
utils-$(USE_UTILS) := $(addprefix $(UTIL_D), drvr_load_file.o drvr_utils.o)

# XML parser
xml-$(USE_XML)     := $(addprefix $(UTIL_D), libinstkernel.o)

# CDCM backbone
ifeq ($(CONFIG_BUS_PCI), y)
ccflags += -DCONFIG_BUS_PCI
cdcmpci-$(CONFIG_BUS_PCI) += cdcmPci.o cdcmPciDmaLinux.o
endif

ifeq ($(CONFIG_BUS_VME), y)
ccflags-y += -DCONFIG_BUS_VME
cdcmvme-$(CONFIG_BUS_VME) += cdcmVme.o

quiet_cmd_copy_symvers = COPY    $@
      cmd_copy_symvers = cat $< > $@

# We need to copy 'vmebus' Module.symvers file locally to get
# rid of compilation warnings.

# $(extra-y) and $(targets) is _not_ working here
always += Module.symvers

# We need to copy .symvers file locally
$(obj)/Module.symvers: $(VMEB_D)Module.symvers
	$(call cmd,copy_symvers)
endif # CONFIG_BUS_VME

# This driver was generated by driverGen
ifeq ($(CONFIG_IS_DG), y)
ccflags-y += -DCONFIG_IS_DG
dgpci-$(CONFIG_BUS_PCI) := cdcm-driver-gen-pci.o
dgvme-$(CONFIG_BUS_VME) := cdcm-driver-gen-vme.o
dg-$(CONFIG_IS_DG) = $(dgpci-y) $(dgvme-y)
endif # CONFIG_IS_DG


cdcm-$(IS_CDCM) := $(addprefix $(CDCM_D), \
		   cdcmBoth.o cdcmDrvr.o cdcmLynxAPI.o \
		   cdcmMem.o cdcmThread.o cdcmTime.o \
		   $(cdcmvme-y) $(cdcmpci-y) $(dg-y))

DRIVER    := $(notdir $(DRIVER:.ko=))
SIMULATOR := $(notdir $(SIMULATOR:.ko=))

ifeq ($(BLD), drvr)
obj-m := $(DRIVER).o
ccflags-y += -D_DG_DRVR
else
obj-m := $(SIMULATOR).o
ccflags-y += -D_DG_SIM
endif

$(DRIVER)-y    := $(DRVROBJS) $(cdcm-y) $(utils-y) $(xml-y)
$(SIMULATOR)-y := $(SIMOBJS) $(cdcm-y) $(utils-y) $(xml-y)